
import os
import psycopg2
import psycopg2.extras
from prettytable import PrettyTable
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py


def query():
    load_dotenv()

    user = os.getenv('USERNAMEZ')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor, host='127.0.0.1', port='5432')
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    
    class MFStruct:
        prod = ""
        min_0_quant = float('inf')
        sum_1_quant = 0
        sum_2_quant = 0
        sum_3_quant = 0

    data = []
    
    # For all the grouping variables
    group_by_map = dict()
    
    for row in cur:
        key = (row.get('prod'))
        
        if (not group_by_map.get(key)) and (group_by_map.get(key) != 0):
            data.append(MFStruct())
            group_by_map[key] = len(data) - 1
        
        pos = group_by_map.get(key)
        data[pos].prod = row.get('prod')

    # We need to compute values to the aggregate functions with their corresponding grouping variable predicate.
    cur.scroll(0, mode='absolute')

    for row in cur:
        key = (row.get('prod'))
        pos = group_by_map[key]
        prod = data[pos].prod
        min_0_quant = data[pos].min_0_quant
        sum_1_quant = data[pos].sum_1_quant
        sum_2_quant = data[pos].sum_2_quant
        sum_3_quant = data[pos].sum_3_quant

        if row.get('prod')==prod:
            data[pos].min_0_quant = min(data[pos].min_0_quant, row.get('quant'))
    cur.scroll(0, mode='absolute')

    for row in cur:
        key = (row.get('prod'))
        pos = group_by_map[key]
        prod = data[pos].prod
        min_0_quant = data[pos].min_0_quant
        sum_1_quant = data[pos].sum_1_quant
        sum_2_quant = data[pos].sum_2_quant
        sum_3_quant = data[pos].sum_3_quant

        if row.get('month')==1:
            data[pos].sum_1_quant = data[pos].sum_1_quant + row.get('quant')
    cur.scroll(0, mode='absolute')

    for row in cur:
        key = (row.get('prod'))
        pos = group_by_map[key]
        prod = data[pos].prod
        min_0_quant = data[pos].min_0_quant
        sum_1_quant = data[pos].sum_1_quant
        sum_2_quant = data[pos].sum_2_quant
        sum_3_quant = data[pos].sum_3_quant

        if row.get('month')==2:
            data[pos].sum_2_quant = data[pos].sum_2_quant + row.get('quant')
    cur.scroll(0, mode='absolute')

    for row in cur:
        key = (row.get('prod'))
        pos = group_by_map[key]
        prod = data[pos].prod
        min_0_quant = data[pos].min_0_quant
        sum_1_quant = data[pos].sum_1_quant
        sum_2_quant = data[pos].sum_2_quant
        sum_3_quant = data[pos].sum_3_quant

        if row.get('month')==3 and row.get('quant')>min_0_quant:
            data[pos].sum_3_quant = data[pos].sum_3_quant + row.get('quant')

    # Apply HAVING clause if present

    table = PrettyTable()
    table.field_names = ['prod', 'min_0_quant', 'sum_1_quant', 'sum_2_quant', 'sum_3_quant']
    
    for obj in data:
        temp = []
        
        for j in table.field_names:
            temp.append(getattr(obj, j))
        table.add_row(temp)

    # Printing the table
    return table

    
def main():
    print(query())
    
    
if "__main__" == __name__:
    main()
    