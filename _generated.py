
import os
import psycopg2
import psycopg2.extras
from prettytable import PrettyTable
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py


def query():
    load_dotenv()

    user = os.getenv('USERNAMEZ')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor, host='127.0.0.1', port='5432')
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    
    class MFStruct:
        cust = ""
        prod = ""
        count_1_quant = 0
        sum_2_quant = 0
        min_2_quant = float('inf')
        max_3_quant = -1

    data = []
    
    # For all the grouping variables
    group_by_map = dict()
    
    for row in cur:
        key = (row.get('cust'), row.get('prod'))
        
        if (not group_by_map.get(key)) and (group_by_map.get(key) != 0):
            data.append(MFStruct())
            group_by_map[key] = len(data) - 1
        
        pos = group_by_map.get(key)
        data[pos].cust = row.get('cust')
        data[pos].prod = row.get('prod')

    # We need to compute values to the aggregate functions with their corresponding grouping variable predicate.
    cur.scroll(0, mode='absolute')

    for row in cur:
        key = (row.get('cust'), row.get('prod'))
        if row.get('state')=='NY' and row.get('quant')>10 and row.get('cust')=='Sam':
            pos = group_by_map[key]
            data[pos].count_1_quant = data[pos].count_1_quant + 1
    cur.scroll(0, mode='absolute')

    for row in cur:
        key = (row.get('cust'), row.get('prod'))
        if row.get('state')=='NJ':
            pos = group_by_map[key]
            data[pos].sum_2_quant = data[pos].sum_2_quant + row.get('quant')
    cur.scroll(0, mode='absolute')

    for row in cur:
        key = (row.get('cust'), row.get('prod'))
        if row.get('state')=='NJ':
            pos = group_by_map[key]
            data[pos].min_2_quant = min(data[pos].min_2_quant, row.get('quant'))
    cur.scroll(0, mode='absolute')

    for row in cur:
        key = (row.get('cust'), row.get('prod'))
        if row.get('state')=='CT':
            pos = group_by_map[key]
            data[pos].max_3_quant = max(data[pos].max_3_quant, row.get('quant'))

    # Apply HAVING clause if present
    data = [obj for obj in data if obj.sum_2_quant > obj.max_3_quant and obj.min_2_quant > 0]

    table = PrettyTable()
    table.field_names = ['cust', 'prod', 'count_1_quant', 'sum_2_quant', 'min_2_quant', 'max_3_quant']
    
    for obj in data:
        temp = []
        
        for j in table.field_names:
            temp.append(getattr(obj, j))
        table.add_row(temp)

    # Printing the table
    return table

    


def main():
    print(query())
    
    
if "__main__" == __name__:
    main()
    