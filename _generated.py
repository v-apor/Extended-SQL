
import os
import psycopg2
import psycopg2.extras
from prettytable import PrettyTable
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py


def query():
    load_dotenv()

    user = os.getenv('USERNAMEZ')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor, host='127.0.0.1', port='5432')
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    
    class MFStruct:
        cust = ""
        sum_1_quant = 0
        sum_2_quant = 0
        sum_3_quant = 0

    data = []
    
    # For all the grouping variables
    group_by_map = dict()
    
    for row in cur:
        key = (row.get('cust'))
        
        if (not group_by_map.get(key)) and (group_by_map.get(key) != 0):
            data.append(MFStruct())
            group_by_map[key] = len(data) - 1
        
        pos = group_by_map.get(key)
        data[pos].cust = row.get('cust')

    # We need to compute values to the aggregate functions with their corresponding grouping variable predicate.
    cur.scroll(0, mode='absolute')

    for row in cur:
        key = (row.get('cust'))
        if row.get('state')=='NY' and row.get('quant')>100:
            pos = group_by_map[key]
            data[pos].sum_1_quant = data[pos].sum_1_quant + row.get('quant')
    cur.scroll(0, mode='absolute')

    for row in cur:
        key = (row.get('cust'))
        if row.get('state')=='NJ' and row.get('quant')>100:
            pos = group_by_map[key]
            data[pos].sum_2_quant = data[pos].sum_2_quant + row.get('quant')
    cur.scroll(0, mode='absolute')

    for row in cur:
        key = (row.get('cust'))
        if row.get('state')=='CT' and row.get('quant')>100:
            pos = group_by_map[key]
            data[pos].sum_3_quant = data[pos].sum_3_quant + row.get('quant')

    # Apply HAVING clause if present
    data = [obj for obj in data if obj.sum_1_quant > obj.sum_2_quant or obj.sum_3_quant > obj.sum_1_quant]


    operations_dict = {'cust': {'found': False}, 'sum_2_quant': {'found': False}, 'sum_1_quant/2': {'operator': '/', 'operand1': 'sum_1_quant', 'operand2': '2', 'found': True}, 'sum_1_quant+sum_2_quant': {'operator': '+', 'operand1': 'sum_1_quant', 'operand2': 'sum_2_quant', 'found': True}, 'sum_1_quant*2': {'operator': '*', 'operand1': 'sum_1_quant', 'operand2': '2', 'found': True}, '2*sum_1_quant': {'operator': '*', 'operand1': '2', 'operand2': 'sum_1_quant', 'found': True}}
    table = PrettyTable()
    table.field_names = ['cust', 'sum_2_quant', 'sum_1_quant/2', 'sum_1_quant+sum_2_quant', 'sum_1_quant*2', '2*sum_1_quant']
    
    for obj in data:
        temp = []
        
        for j in table.field_names:
            if not operations_dict[j]['found']:
                temp.append(getattr(obj, j))
            else:
                if not(operations_dict[j]['operand1'].isnumeric() or operations_dict[j]['operand2'].isnumeric()):
                    value = eval(f"{getattr(obj, operations_dict[j]['operand1'])} {operations_dict[j]['operator']} {getattr(obj, operations_dict[j]['operand2'])}")
                    temp.append(value)
                else:
                    is_1_int = True if operations_dict[j]['operand1'].isnumeric() else False
                    is_2_int = True if operations_dict[j]['operand2'].isnumeric() else False
                    int_expr = f"{operations_dict[j]['operand1']} {operations_dict[j]['operator']} {getattr(obj, operations_dict[j]['operand2'])}" if is_1_int else f"{getattr(obj, operations_dict[j]['operand1'])} {operations_dict[j]['operator']} {operations_dict[j]['operand2']}"
                    value = eval(int_expr)
                    temp.append(value)
        table.add_row(temp)

    # Printing the table
    return table

    


def main():
    print(query())
    
    
if "__main__" == __name__:
    main()
    